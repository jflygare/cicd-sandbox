name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        type: choice
        options:
          - staging
          - production
        required: true
        default: 'staging'
      version:
        description: 'Version (image tag)'
        required: true
        type: string
        default: 'latest'
      deploy_image:
        description: 'Deploy image'
        type: boolean
        required: true
        default: true
      deploy_ecs:
        description: 'Deploy ECS'
        type: boolean
        required: true
        default: true

env:
  ECR_REPOSITORY: rtm-gateway/${{ inputs.environment }}
  IMAGE_TAG: ${{ inputs.version }}
  AWS_REGION: us-east-1
  #AWS_ACCESS_KEY_ID: ${{ inputs.environment == 'production' && secrets.PRODUCTION_AWS_ACCESS_KEY_ID || secrets.STAGING_AWS_ACCESS_KEY_ID }}
  #AWS_SECRET_ACCESS_KEY: ${{ inputs.environment == 'production' && secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY || secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


jobs:
  deploy_image:
    if: ${{ inputs.deploy_image }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/
          cache: 'npm'

      - name: NPM auth
        run: |
          npm config set //npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: npm clean-install
        shell: bash

      - name: Print Environment Info
        run: npx nx report
        shell: bash

      - name: Build package
        #run: npx nx run cicd-sandbox:build
        run: npx nx run-many -t build --no-cloud
        shell: bash

      # https://github.com/aws-actions/configure-aws-credentials/tree/v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # https://github.com/aws-actions/amazon-ecr-login/tree/v2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
           mask-password: true

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -f apps/cicd-sandbox/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy_ecs:
    if: ${{ inputs.deploy_ecs }}
    runs-on: ubuntu-latest
    steps:
      - name: Echo
        run: |
          echo "Deploy ECS"

